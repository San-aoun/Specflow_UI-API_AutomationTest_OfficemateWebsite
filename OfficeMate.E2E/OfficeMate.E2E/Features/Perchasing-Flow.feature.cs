// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OfficeMate.E2E.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PerchasingFeature : object, Xunit.IClassFixture<PerchasingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Perchasing-Flow.feature"
#line hidden
        
        public PerchasingFeature(PerchasingFeature.FixtureData fixtureData, OfficeMate_E2E_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Perchasing", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The user adds perchase the pencil item should update success")]
        [Xunit.TraitAttribute("FeatureTitle", "Perchasing")]
        [Xunit.TraitAttribute("Description", "The user adds perchase the pencil item should update success")]
        public void TheUserAddsPerchaseThePencilItemShouldUpdateSuccess()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user adds perchase the pencil item should update success", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.When("the user add the item \"Plus Pen-3000 Green (04) A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 5
 testRunner.And("the user go to cart for view cart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
 testRunner.And("the user proceed to checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Data",
                            "Value"});
                table2.AddRow(new string[] {
                            "First Name",
                            "Jane"});
                table2.AddRow(new string[] {
                            "Last Name",
                            "Doe"});
                table2.AddRow(new string[] {
                            "Phone",
                            "09-999-9999"});
                table2.AddRow(new string[] {
                            "Email",
                            "Automation_test01@gmail.com"});
                table2.AddRow(new string[] {
                            "Address",
                            "2/3 Bangkok"});
                table2.AddRow(new string[] {
                            "Zip Code",
                            "10520"});
                table2.AddRow(new string[] {
                            "Region",
                            "Bangkok"});
                table2.AddRow(new string[] {
                            "District",
                            "Lat Krabang"});
                table2.AddRow(new string[] {
                            "Sub District",
                            "Lam Pla Thio"});
#line 7
 testRunner.And("the user Specify Delivery Information with data", ((string)(null)), table2, "And ");
#line hidden
#line 18
 testRunner.And("Click Taz invoice same address as the delivery", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("the user proceed to payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Data",
                            "Value"});
                table3.AddRow(new string[] {
                            "Card Number",
                            "0000 0000 0000 0000 000"});
                table3.AddRow(new string[] {
                            "Full Name on card",
                            "Jane Doe"});
                table3.AddRow(new string[] {
                            "Expired date",
                            "25/62"});
                table3.AddRow(new string[] {
                            "CVV/CVC",
                            "225"});
#line 20
 testRunner.And("Select you payment option \"Credit Card/Debit Card\" and updated infomation", ((string)(null)), table3, "And ");
#line hidden
#line 26
 testRunner.And("Click \"Pay Now\" button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PerchasingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PerchasingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
